:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.emacs.d/init.el :mkdirp yes
:END:
#+title: Literate Emacs Config

* Welcome Back!

This is the configuration I've built from the *Emacs From Scratch* series, now written as an Org Mode document.  This file generates [[file:~/.emacs.d/init.el][this file]] which can be loaded by Emacs at startup.

#+begin_src emacs-lisp
  ;; This init.el file was tangled by orgmode from ~/Documents/org/init.org
#+end_src

* Tips for Use

In this document I've added links in many places that lead you to documentation for the various packages we use.  If you're looking at this file in Emacs, you can put your cursor on a link and press =C-c C-o= or run =M-x org-open-at-point= to open the link in your web browser.

* Startup Performance

#+begin_src emacs-lisp

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun occam/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                       (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'occam/display-startup-time)

#+end_src

* Package System Setup

Emacs has a built in package manager but it doesn't make it easy to automatically install packages on a new system the first time you pull down your configuration.  [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

** Automatic Package Updates

The auto-package-update package helps us keep our Emacs packages up to date!  It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.

You can also use =M-x auto-package-update-now= to update right now!

#+begin_src emacs-lisp

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

#+end_src

* Keep Folders Clean

We use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep folders where we edit files and the Emacs configuration folder clean!  It knows about a wide variety of variables for built in Emacs features as well as those from community packages so it can be much easier than finding and setting these variables yourself.

#+begin_src emacs-lisp

  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!
  ;(setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src

* Let Systemd Service See Env Var
#+begin_src emacs-lisp
  (use-package exec-path-from-shell)

  ;; sets sys var when you call emacs from cmd line
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
  (when (daemonp)
    (exec-path-from-shell-initialize))

#+end_src
* Basic UI Configuration

This section configures basic UI settings that remove unneeded elements to make Emacs look a lot more minimal and modern.  If you're just getting started in Emacs, the menu bar might be helpful so you can remove the =(menu-bar-mode -1)= line if you'd like to still see that.

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)
  (setq auto-revert-mode t) ; Reloads buffer after it has changed

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  vterm-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Font Configuration

I am using Isokova Mono Nerd Font, because it is my favorite!

#+begin_src emacs-lisp

  ;; Doesn't have access to italicized fonts
  (set-face-attribute 'default nil :font "Iosevka Term" :height 160)

#+end_src

* Keybinding Configuration

This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience.  [[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with which-key.  [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :after evil
    :config
    (general-create-definer occam/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

  (occam/leader-keys
    "/" '(evilnc-comment-or-uncomment-lines :which-key "comment code")
    "b"  '(:ignore t :which-key "buffer")
    "bi" '(counsel-ibuffer :which-key "Calls ibuffer")
    "bb" '(counsel-switch-buffer :which-key "Switch between active buffers")
    "bd" '(kill-buffer :which-key "kill buffer")
    "bD" '(kill-buffer-and-window :which-key "kill buffer&window")
    "bk" '(kill-buffer :which-key "kill buffer")
    "bK" '(kill-buffer-and-window :which-key "kill buffer&window")
    "c"  '(:ignore t :which-key "search")
    "cf" '(counsel-fzf :which-key "fzf file")
    "cs" '(counsel-rg :which-key "search for string in file")
    "f"  '(:ignore t :which-key "file")
    "fs" '(save-buffer :which-key "save current file")
    "fS" '(swiper :which-key "search in file")
    "ff" '(counsel-find-file :which-key "find file")
    "fc" '((lambda () (interactive) (find-file (expand-file-name "~/Documents/org/init.org"))) :which-key "config file")
    "s"  '(:ignore t :which-key "snippets")
    "si"  '(yas-insert-snippet :which-key "insert snippet")
    "sn"  '(yas-new-snippet :which-key "create new snippet")
    "sl"  '(yas-load-directory :which-key "load snippet directory")
    "o"  '(:ignore t :which-key "open")
    "oa" '(org-agenda :which-key "org agenda")
    "oc" '(counsel-org-capture :which-key "org capture")
    "ol" '(ivy-bibtex :which-key "open bibliography")
    "op" '(dired :which-key "open file tree")
    "ot" '(vterm-toggle :which-key "open vterm")
    "m"  '(mathpix-screenshot :which-key "mathpix")
    "n" '(:ignore t :which-key "org")
    "nf" '(counsel-org-goto :which-key "find heading in file")
    "nI" '(org-id-get-create :which-key "modify node id")
    "nl" '(counsel-org-link :which-key "insert link to header")
    "nc" '(org-ref-insert-cite-link :which-key "insert cite link")
    "no" '(org-open-at-point :which-key "open link at point")
    "nr" '(org-refile :which-key "refile")
    "ns" '(org-store-link :which-key "store link")
    "na" '(:ignore t :which-key "add")
    "nat" '(counsel-org-tag :which-key "tag")
    "nar" '(org-ref-insert-link :which-key "ref")
    "p"  '(:ignore t :which-key "project")
    "pp"  '(projectile-switch-project :which-key "switch project")
    "pa" '(projectile-add-known-project :which-key "add new project")
    "pf" '(project-find-file :which-key "find file inside project")
    "pc" '(project-compile :which-key "run compile command")
    "g"  '(:ignore t :which-key "git")
    "gg"  '(magit-status :which-key "magit status")
    "t"  '(:ignore t :which-key "text")))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-undo-system 'undo-fu)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    ;; Use good windows movement keys
    (define-key evil-normal-state-map (kbd "C-M-h") 'evil-window-left)
    (define-key evil-normal-state-map (kbd "C-M-j") 'evil-window-down)
    (define-key evil-normal-state-map (kbd "C-M-k") 'evil-window-up)
    (define-key evil-normal-state-map (kbd "C-M-l") 'evil-window-right)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  ;; enables undo/redo stuff
  (use-package undo-fu
    :after evil)



#+end_src

* UI Configuration

** Color Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can also run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp

(use-package doom-themes
  :init (load-theme 'doom-dracula t))

#+end_src

** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.


#+begin_src emacs-lisp

  ;; icons for modeline/filetree package
  (use-package all-the-icons
    :if (display-graphic-p)
    :commands all-the-icons-install-fonts
    :init
    (unless (find-font (font-spec :name "all-the-icons"))
      (all-the-icons-install-fonts t)))

  (use-package all-the-icons-dired
    :if (display-graphic-p)
    :hook (dired-mode . all-the-icons-dired-mode))

  ;; modeline
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom (doom-modeline-height 15))

#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0))

#+end_src

** Ivy and Counsel

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package swiper)

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer) ;; list of active buffers
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

#+end_src

*** Improved Candidate Sorting with prescient.el

prescient.el provides some helpful behavior for sorting Ivy completion candidates based on how recently or frequently you select them.  This can be especially helpful when using =M-x= to run commands that you don't have bound to a key but still need to access occasionally.

This Prescient configuration is optimized for use in System Crafters videos and streams, check out the [[https://youtu.be/T9kygXveEz0][video on prescient.el]] for more details on how to configure it!

#+begin_src emacs-lisp

  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
    (prescient-persist-mode 1)
    (ivy-prescient-mode 1))

#+end_src

** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

This is especially useful for getting docs on functions =C-h f= or on variables =C-h v=

#+begin_src emacs-lisp

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Text Scaling

This is an example of using [[https://github.com/abo-abo/hydra][Hydra]] to design a transient key binding for quickly adjusting the scale of the text on screen.  We define a hydra that is bound to =<leader> t s= and, once activated, =j= and =k= increase and decrease the text scale.  You can press any other key (or =f= specifically) to exit the transient key map.

#+begin_src emacs-lisp

  (use-package hydra
    :defer t)

  (defhydra hydra-text-scale (:timeout 5)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("q" nil "finished" :exit t))

  (occam/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

* Org Mode

[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Basic Config

This section contains the basic configuration for =org-mode= plus the configuration for Org agendas and capture templates.  There's a lot to unpack in here so I'd recommend watching the videos for [[https://youtu.be/VcgjTEa0kU4][Part 5]] and [[https://youtu.be/PNE-mgkZ6HM][Part 6]] for a full explanation.

#+begin_src emacs-lisp

  (defun occam/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1)
    (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook 'org-preview-latex-fragment nil 'make-it-local)))
    )

  ;; If I ever choose to change fonts based off of headings/code boxes/etc
  ;; I should do so here
  (defun occam/org-font-setup ()
      ;; Replace list hyphen with dot
      (font-lock-add-keywords 'org-mode
                              '(("^ *\\([-]\\) "
                              (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))))))



  (use-package org
    :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . occam/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (setq org-startup-with-latex-preview t)
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))

    (setq org-agenda-start-with-log-mode t)
    (setq org-agenda-timegrid-use-ampm 1)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-directory "~/Documents/org/")
    (setq org-agenda-files
          '("tasks.org"))

    (setq org-todo-keywords
                     '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
                       (sequence "PROVE(p)" "WRITE(w)" "STUCK(s)" "REWORK(r)" "HELP(h)" "|" "DONE(d)" "QUIT(q)")))

    (setq org-refile-targets
      '(("archive.org" :maxlevel . 1)
        ("tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
      '((:startgroup)
         ; Put mutually exclusive tags here
         (:endgroup)
         ("book" . ?a)
         ("current" . ?c)
         ("theorem" . ?t)
         ("definition" . ?d)
         ("note" . ?n)
         ("idea" . ?i)))

    ;; Configure custom agenda views
    ;; TODO 

   (setq org-capture-templates
      `(("t" "Tasks / Projects")
        ("tt" "Task" entry (file+olp "~/Documents/org/tasks.org" "Inbox")
                "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)))

    (occam/org-font-setup))

#+end_src

Also, this gives us the ability to drag/copy paste images into org mode

#+begin_src emacs-lisp

    (use-package org-download
      :after org)
    (add-hook 'dired-mode-hook 'org-download-enable)
#+end_src

*** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** Center Org Buffers

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.  This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

#+begin_src emacs-lisp

  (defun occam/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . occam/org-mode-visual-fill))

#+end_src

** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
       (python . t)
       (calc . t)
       (latex . t)
       (gnuplot . t)
       (haskell . t)
       (makefile . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

** Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("la" . "src latex"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))

#+end_src

** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =occam/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun occam/org-babel-tangle-config ()
    (when (string-equal  (buffer-file-name)
                                            (expand-file-name "~/Documents/org/init.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'occam/org-babel-tangle-config)))

#+end_src

** Org-Roam

Org Roam creates a zettle system for org-mode, much like obsidian.md does with markdown files

#+begin_src emacs-lisp

    (use-package org-roam
      :after org
      :init (setq org-roam-v2-ack t) ;; Acknowledge V2 upgrade
      :custom
      (org-roam-directory (file-truename org-directory))
      :config
      (org-roam-setup)
      (add-hook 'org-roam-mode-hook (lambda () (add-hook 'after-save-hook 'org-preview-latex-fragment nil 'make-it-local)))
      (setq org-roam-mode-sections
            (list #'org-roam-backlinks-section
                  #'org-roam-reflinks-section
                  ;; This may cause slowdown
                  #'org-roam-unlinked-references-section
                  )))

  (add-to-list 'display-buffer-alist
               '("\\*org-roam\\*"
                 (display-buffer-in-side-window)
                 (side . right)
                 (slot . 0)
                 (window-width . 0.33)
                 (window-parameters . ((no-other-window . t)
                                       (no-delete-other-windows . t)))))

    (use-package org-roam-ui
      :after org-roam
      :config
      (setq org-roam-ui-sync-theme t
            org-roam-ui-follow t
            org-roam-ui-update-on-save t
            org-roam-ui-open-on-start t))

#+end_src

* LaTeX
** Mathpix
A package that uses mathpix api which allows you to select an area of the screen, and it converts it into latex code. It does cost money per snip, but its like 0.01 per.

This package doesn't use package.el, but instead straight.el. Why.

# #+begin_src emacs-lisp

#   ;; Install use-package
#   (straight-use-package 'use-package)

#   (use-package request)

#   (use-package mathpix.el
#     :straight (:host github :repo "jethrokuan/mathpix.el")
#     :custom ((mathpix-app-id "me_loganreed_org_e1a834_d0dac7")
#              (mathpix-app-key "6ef3c9382d6f0e8b1d027b356a31e07a792fe8115be66c2de41727ce69732f80"))
#     :bind
#     ("C-m" . mathpix-screenshot))


# #+end_src

** Fast Editing

CDLatex is a _very_ tight partner with AucTex, and contains a lot of shortcuts/macros that helps one to write LaTeX.

#+begin_src emacs-lisp
    (use-package cdlatex
      :after auctex)
    (add-hook 'LaTeX-mode-hook #'turn-on-cdlatex)   ; with AUCTeX LaTeX mode
    (add-hook 'latex-mode-hook #'turn-on-cdlatex)   ; with Emacs latex mode
#+end_src

On the other hand, evil-tex is a evil package that implements a lot of tex specific surround functions.

#+begin_src emacs-lisp

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))
  (use-package evil-tex)

#+end_src

** AUCTeX

AUCTeX is more or less a lsp engine for latex, that has a lot of interoperability with org-mode. I've also added a package that allows auctex to use latexmk as a backend

#+begin_src emacs-lisp

   (use-package auctex
     :defer t
     :config
     (setq TeX-auto-save t)
     (setq TeX-parse-self t))

  ;; fixed small bug with pdf-tools
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

  (use-package auctex-latexmk
       :after auctex)
#+end_src

** Company Integration
Company has a few packages that allow us to have autocompletes for math/tex/etc.
TODO.

** Displaying PDFs
One goal for using latex inside of emacs is the ability to have the pdf file hot load, and to be able to take notes on pdf textbooks without leaving emacs. Most of this is from [[https://github.com/fuxialexander/org-pdftools][This repo.]]

#+begin_src emacs-lisp
    (use-package pdf-tools)

    ;; general org/pdf links
    (use-package org-pdftools
      :hook (org-mode . org-pdftools-setup-link)
      :config
      (pdf-tools-install))

      ;; Take notes on pdf files in org mode
    (use-package org-noter
      :bind (
             ("C-c C-i" . org-noter-insert-note)
             ("C-c C-I" . org-noter-pdftools-insert-precise-note))
      :config
      ;; Your org-noter config ........
      (require 'org-noter-pdftools))

    (use-package org-noter-pdftools
    :after org-noter
    :config
    ;; Add a function to ensure precise note is inserted
    (defun org-noter-pdftools-insert-precise-note (&optional toggle-no-questions)
      (interactive "P")
      (org-noter--with-valid-session
       (let ((org-noter-insert-note-no-questions (if toggle-no-questions
                                                     (not org-noter-insert-note-no-questions)
                                                   org-noter-insert-note-no-questions))
             (org-pdftools-use-isearch-link t)
             (org-pdftools-use-freepointer-annot t))
         (org-noter-insert-note (org-noter--get-precise-info)))))

  ;; fix https://github.com/weirdNox/org-noter/pull/93/commits/f8349ae7575e599f375de1be6be2d0d5de4e6cbf
    (defun org-noter-set-start-location (&optional arg)
      "When opening a session with this document, go to the current location.
  With a prefix ARG, remove start location."
      (interactive "P")
      (org-noter--with-valid-session
       (let ((inhibit-read-only t)
             (ast (org-noter--parse-root))
             (location (org-noter--doc-approx-location (when (called-interactively-p 'any) 'interactive))))
         (with-current-buffer (org-noter--session-notes-buffer session)
           (org-with-wide-buffer
            (goto-char (org-element-property :begin ast))
            (if arg
                (org-entry-delete nil org-noter-property-note-location)
              (org-entry-put nil org-noter-property-note-location
                             (org-noter--pretty-print-location location))))))))
    (with-eval-after-load 'pdf-annot
      (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))

#+end_src
** BibTex Integration
I use zotero to manage my bibliography, and via a bunch of packages I am able to link it thoughout latex and org-mode.

#+begin_src emacs-lisp

  (setq bibtex-completion-bibliography '("~/.bib/lib/lib.bib"))
    (use-package ivy-bibtex
      :after ivy
      :custom
      (bibtex-completion-pdf-field "file")
      :config
      (setq bibtex-completion-library-path '("~/.bib/lib")))

    (use-package org-ref)

#+end_src

* Development
** Languages
*** IDE Features with lsp-mode
**** lsp-mode

We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].  Before trying to set up =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which language servers are available and how to install them.

The =lsp-keymap-prefix= setting enables you to define a prefix for where =lsp-mode='s default keybindings will be added.  I *highly recommend* using the prefix to find out what you can do with =lsp-mode= in a buffer.

The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l= in a =lsp-mode= buffer and trying different things that you find there.

#+begin_src emacs-lisp

  (defun occam/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . occam/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "SPC l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))
 
#+end_src

**** lsp-treemacs

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp)

#+end_src

**** lsp-ivy

[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code.  When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code.  Results will be populated in the minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp

  (use-package lsp-ivy
    :after lsp)

#+end_src
*** Haskell

# #+begin_src emacs-lisp

#   (use-package haskell-mode)
#   (use-package lsp-ui :commands lsp-ui-mode)
#   (use-package lsp-haskell)

#   ;; Allows haskell major modes to auto call lsp
#   (add-hook 'haskell-mode-hook #'lsp) 
#   (add-hook 'haskell-literate-mode-hook #'lsp) 
# #+end_src

*** Python

We use =lsp-mode= and =dap-mode= to provide a more complete development environment for Python in Emacs.  Check out [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pyls/][the =pyls= configuration]] in the =lsp-mode= documentation for more details.

Make sure you have the =pyls= language server installed before trying =lsp-mode=!

# #+begin_src sh :tangle no

# pip install --user "python-language-server[all]"

# #+end_src

There are a number of other language servers for Python so if you find that =pyls= doesn't work for you, consult the =lsp-mode= [[https://emacs-lsp.github.io/lsp-mode/page/languages/][language configuration documentation]] to try the others!

# #+begin_src emacs-lisp

#   (use-package python-mode
#     :ensure t
#     :hook (python-mode . lsp-deferred))

# #+end_src

You can use the pyvenv package to use =virtualenv= environments in Emacs.  The =pyvenv-activate= command should configure Emacs to cause =lsp-mode= and =dap-mode= to use the virtual environment when they are loaded, just select the path to your virtual environment before loading your project.

# #+begin_src emacs-lisp

#   (use-package pyvenv
#     :after python-mode
#     :config
#     (pyvenv-mode 1))

# #+end_src

** Snippets

[[https://joaotavora.github.io/yasnippet/][YASnippet]] is a snippet engine that is similar to textmate. Unlike neovim snippet engines,
YASnippet is easy to setup and has built in keybindings for adding new snippets. It also has a strong list of guides online. 

#+begin_src emacs-lisp

    (use-package yasnippet
      :config
      (yas-global-mode 1))
    ;;collection of snippets
    (use-package yasnippet-snippets
      :after yasnippet)
    (setq yas-snippet-dirs
            '("~/.emacs.d/snippets"))

#+end_src

** Company Mode

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

** Projectile

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Documents/")
      (setq projectile-project-search-path '("~/Documents/")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

#+end_src

** Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp

  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; Forge (below) extends magit to be able to work with github, but requires a
  ;; API key to make it work, and apparently the config is kinda ass 

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  ;;(use-package forge
  ;;  :after magit)

#+end_src

** Commenting

Emacs' built in commenting functionality =comment-dwim= (usually bound to =M-;=) doesn't always comment things in the way you might expect so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior.  I've bound it to =M-/= since other editors sometimes use this binding but you could also replace Emacs' =M-;= binding with this command.

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** vterm

[[https://github.com/akermu/emacs-libvterm/][vterm]] is an improved terminal emulator package which uses a compiled native module to interact with the underlying terminal applications.  This enables it to be much faster than =term-mode= and to also provide a more complete terminal emulation experience.

Make sure that you have the [[https://github.com/akermu/emacs-libvterm/#requirements][necessary dependencies]] installed before trying to use =vterm= because there is a module that will need to be compiled before you can use it successfully.

#+begin_src emacs-lisp

    (use-package vterm
      :commands vterm
      :config
      (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
      (setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
      (setq vterm-max-scrollback 10000))

    (use-package vterm-toggle
      :after vterm)

#+end_src

* File Management

** Dired

Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:

*** Key Bindings

**** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

**** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!

**** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

*** Configuration

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

  (use-package dired-single
    :commands (dired dired-jump))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :commands (dired dired-jump)
    :config
    ;; Doesn't work as expected!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))

#+end_src

* Runtime Performance

Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp

  ;; Make gc pauses faster by decreasing the threshold.
  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src
