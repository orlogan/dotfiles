# Allows us to only have snippets in certain environments
global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
    return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
    return x != '0' and x != '0'

endglobal

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
.\end{align*}
endsnippet

context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

priority 100
snippet ... "ldots" iA
\ldots
endsnippet

snippet != "equals" iA
\neq 
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet
# A string of char followed by 1 or 2 numbers 
# turns into subscript
context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet sr "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sq "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

# To the Power of 
context "math()"
snippet tp "superscript" iA
^{$1}$0
endsnippet

# // => \frac{}{}
# 3/ => \frac{3}{}
# 4\pi^2/ => \frac{4\pi^2}{}
context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

#
# shortcuts for common symbols
#
context "math()"
snippet >> "to" iA
\to 
endsnippet

context "math()"
snippet /> "Maps to" iA
\mapsto 
endsnippet

context "math()"
snippet fc "Function composition" iA
\circ 
endsnippet

context "math()"
snippet sc "Cross Product" iA
\times
endsnippet


context "math()"
snippet ma "Map definition" iA
${1:${VISUAL}} : ${2:X} \to ${3:Y} 
endsnippet


snippet <= "leq" iA
\le 
endsnippet

snippet >= "geq" iA
\ge 
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet


#
# Letters/Variables
#

context "math()"
snippet OO "emptyset" iA
\O
endsnippet

context "math()"
snippet RR "real" iA
\R^{$1} 
endsnippet



#
#
# Alg Top and Cat Theory
#
#

context "math()"
snippet hom "Homotopy" iA
\simeq 
endsnippet

context "math()"
snippet heo "Homeomorphism" iA
\cong  
endsnippet

context "math()"
snippet fgp "Fundamental Groupoid" iA
\Pi(${1:${VISUAL}}) $0
endsnippet

context "math()"
snippet hgp "Homotopy Groupoid" iA
\Pi(${1:X}, ${2:Y}) $0
endsnippet

context "math()"
snippet nhg "n-homotopy group of pointed pair" iA
\pi_{${1:1}}(${2:X}, ${3:Y}, ${4:\ast}) $0
endsnippet



context "math()"
snippet hcm "Homotopy Classes of Maps" iA
\left[ ${1:${VISUAL}}, $2 \right] $0
endsnippet

context "math()"
snippet hcp "Pointed Homotopy Classes of Maps" iA
\left[ ${1:${VISUAL}}, $2 \right]^{0} $0
endsnippet

context "math()"
snippet hco "Homotopy Classes over __" iA
\left[ ${1:${VISUAL}}, $2 \right]^{$3} $0
endsnippet

context "math()"
snippet hcu "Homotopy Classes under __" iA
\left[ ${1:${VISUAL}}, $2 \right]_{$3} $0
endsnippet

context "math()"
snippet bd "Boundary" iA
\partial $1 
endsnippet



#
# Others
#

# sympy integration
snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet
